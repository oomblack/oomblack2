#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#
import os, sys
sys.path.append(os.getcwd())
from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import logging
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def getRSAKey(self):
    pass

  def notifyEmailConfirmationResult(self, parameterMap):
    """
    Parameters:
     - parameterMap
    """
    pass

  def registerVirtualAccount(self, locale, encryptedVirtualUserId, encryptedPassword):
    """
    Parameters:
     - locale
     - encryptedVirtualUserId
     - encryptedPassword
    """
    pass

  def requestVirtualAccountPasswordChange(self, virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword):
    """
    Parameters:
     - virtualMid
     - encryptedVirtualUserId
     - encryptedOldPassword
     - encryptedNewPassword
    """
    pass

  def requestVirtualAccountPasswordSet(self, virtualMid, encryptedVirtualUserId, encryptedNewPassword):
    """
    Parameters:
     - virtualMid
     - encryptedVirtualUserId
     - encryptedNewPassword
    """
    pass

  def unregisterVirtualAccount(self, virtualMid):
    """
    Parameters:
     - virtualMid
    """
    pass

  def checkUserAge(self, carrier, sessionId, verifier, standardAge):
    """
    Parameters:
     - carrier
     - sessionId
     - verifier
     - standardAge
    """
    pass

  def checkUserAgeWithDocomo(self, openIdRedirectUrl, standardAge, verifier):
    """
    Parameters:
     - openIdRedirectUrl
     - standardAge
     - verifier
    """
    pass

  def retrieveOpenIdAuthUrlWithDocomo(self):
    pass

  def retrieveRequestToken(self, carrier):
    """
    Parameters:
     - carrier
    """
    pass

  def addBuddyMember(self, requestId, userMid):
    """
    Parameters:
     - requestId
     - userMid
    """
    pass

  def addBuddyMembers(self, requestId, userMids):
    """
    Parameters:
     - requestId
     - userMids
    """
    pass

  def blockBuddyMember(self, requestId, mid):
    """
    Parameters:
     - requestId
     - mid
    """
    pass

  def commitSendMessagesToAll(self, requestIdList):
    """
    Parameters:
     - requestIdList
    """
    pass

  def commitSendMessagesTomids(self, requestIdList, mids):
    """
    Parameters:
     - requestIdList
     - mids
    """
    pass

  def containsBuddyMember(self, requestId, userMid):
    """
    Parameters:
     - requestId
     - userMid
    """
    pass

  def downloadMessageContent(self, requestId, messageId):
    """
    Parameters:
     - requestId
     - messageId
    """
    pass

  def downloadMessageContentPreview(self, requestId, messageId):
    """
    Parameters:
     - requestId
     - messageId
    """
    pass

  def downloadProfileImage(self, requestId):
    """
    Parameters:
     - requestId
    """
    pass

  def downloadProfileImagePreview(self, requestId):
    """
    Parameters:
     - requestId
    """
    pass

  def getActiveMemberCountByBuddyMid(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    pass

  def getActiveMemberMidsByBuddyMid(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    pass

  def getAllBuddyMembers(self):
    pass

  def getBlockedBuddyMembers(self):
    pass

  def getBlockerCountByBuddyMid(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    pass

  def getBuddyDetailByMid(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    pass

  def getBuddyProfile(self):
    pass

  def getContactTicket(self):
    pass

  def getMemberCountByBuddyMid(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    pass

  def getSendBuddyMessageResult(self, sendBuddyMessageRequestId):
    """
    Parameters:
     - sendBuddyMessageRequestId
    """
    pass

  def getSetBuddyOnAirResult(self, setBuddyOnAirRequestId):
    """
    Parameters:
     - setBuddyOnAirRequestId
    """
    pass

  def getUpdateBuddyProfileResult(self, updateBuddyProfileRequestId):
    """
    Parameters:
     - updateBuddyProfileRequestId
    """
    pass

  def isBuddyOnAirByMid(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    pass

  def linkAndSendBuddyContentMessageToAllAsync(self, requestId, msg, sourceContentId):
    """
    Parameters:
     - requestId
     - msg
     - sourceContentId
    """
    pass

  def linkAndSendBuddyContentMessageTomids(self, requestId, msg, sourceContentId, mids):
    """
    Parameters:
     - requestId
     - msg
     - sourceContentId
     - mids
    """
    pass

  def notifyBuddyBlocked(self, buddyMid, blockerMid):
    """
    Parameters:
     - buddyMid
     - blockerMid
    """
    pass

  def notifyBuddyUnblocked(self, buddyMid, blockerMid):
    """
    Parameters:
     - buddyMid
     - blockerMid
    """
    pass

  def registerBuddy(self, buddyId, searchId, displayName, statusMeessage, picture, settings):
    """
    Parameters:
     - buddyId
     - searchId
     - displayName
     - statusMeessage
     - picture
     - settings
    """
    pass

  def registerBuddyAdmin(self, buddyId, searchId, displayName, statusMessage, picture):
    """
    Parameters:
     - buddyId
     - searchId
     - displayName
     - statusMessage
     - picture
    """
    pass

  def reissueContactTicket(self, expirationTime, maxUseCount):
    """
    Parameters:
     - expirationTime
     - maxUseCount
    """
    pass

  def removeBuddyMember(self, requestId, userMid):
    """
    Parameters:
     - requestId
     - userMid
    """
    pass

  def removeBuddyMembers(self, requestId, userMids):
    """
    Parameters:
     - requestId
     - userMids
    """
    pass

  def sendBuddyContentMessageToAll(self, requestId, msg, content):
    """
    Parameters:
     - requestId
     - msg
     - content
    """
    pass

  def sendBuddyContentMessageToAllAsync(self, requestId, msg, content):
    """
    Parameters:
     - requestId
     - msg
     - content
    """
    pass

  def sendBuddyContentMessageTomids(self, requestId, msg, content, mids):
    """
    Parameters:
     - requestId
     - msg
     - content
     - mids
    """
    pass

  def sendBuddyContentMessageTomidsAsync(self, requestId, msg, content, mids):
    """
    Parameters:
     - requestId
     - msg
     - content
     - mids
    """
    pass

  def sendBuddyMessageToAll(self, requestId, msg):
    """
    Parameters:
     - requestId
     - msg
    """
    pass

  def sendBuddyMessageToAllAsync(self, requestId, msg):
    """
    Parameters:
     - requestId
     - msg
    """
    pass

  def sendBuddyMessageTomids(self, requestId, msg, mids):
    """
    Parameters:
     - requestId
     - msg
     - mids
    """
    pass

  def sendBuddyMessageTomidsAsync(self, requestId, msg, mids):
    """
    Parameters:
     - requestId
     - msg
     - mids
    """
    pass

  def sendIndividualEventToAllAsync(self, requestId, buddyMid, notificationStatus):
    """
    Parameters:
     - requestId
     - buddyMid
     - notificationStatus
    """
    pass

  def setBuddyOnAir(self, requestId, onAir):
    """
    Parameters:
     - requestId
     - onAir
    """
    pass

  def setBuddyOnAirAsync(self, requestId, onAir):
    """
    Parameters:
     - requestId
     - onAir
    """
    pass

  def storeMessage(self, requestId, messageRequest):
    """
    Parameters:
     - requestId
     - messageRequest
    """
    pass

  def unblockBuddyMember(self, requestId, mid):
    """
    Parameters:
     - requestId
     - mid
    """
    pass

  def unregisterBuddy(self, requestId):
    """
    Parameters:
     - requestId
    """
    pass

  def unregisterBuddyAdmin(self, requestId):
    """
    Parameters:
     - requestId
    """
    pass

  def updateBuddyAdminProfileAttribute(self, requestId, attributes):
    """
    Parameters:
     - requestId
     - attributes
    """
    pass

  def updateBuddyAdminProfileImage(self, requestId, picture):
    """
    Parameters:
     - requestId
     - picture
    """
    pass

  def updateBuddyProfileAttributes(self, requestId, attributes):
    """
    Parameters:
     - requestId
     - attributes
    """
    pass

  def updateBuddyProfileAttributesAsync(self, requestId, attributes):
    """
    Parameters:
     - requestId
     - attributes
    """
    pass

  def updateBuddyProfileImage(self, requestId, image):
    """
    Parameters:
     - requestId
     - image
    """
    pass

  def updateBuddyProfileImageAsync(self, requestId, image):
    """
    Parameters:
     - requestId
     - image
    """
    pass

  def updateBuddySearchId(self, requestId, searchId):
    """
    Parameters:
     - requestId
     - searchId
    """
    pass

  def updateBuddySettings(self, settings):
    """
    Parameters:
     - settings
    """
    pass

  def uploadBuddyContent(self, contentType, content):
    """
    Parameters:
     - contentType
     - content
    """
    pass

  def findBuddyContactsByQuery(self, language, country, query, fromIndex, count, requestSource):
    """
    Parameters:
     - language
     - country
     - query
     - fromIndex
     - count
     - requestSource
    """
    pass

  def getBuddyContacts(self, language, country, classification, fromIndex, count):
    """
    Parameters:
     - language
     - country
     - classification
     - fromIndex
     - count
    """
    pass

  def getBuddyDetail(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    pass

  def getBuddyOnAir(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    pass

  def getCountriesHavingBuddy(self):
    pass

  def getNewlyReleasedBuddyIds(self, country):
    """
    Parameters:
     - country
    """
    pass

  def getPopularBuddyBanner(self, language, country, applicationType, resourceSpecification):
    """
    Parameters:
     - language
     - country
     - applicationType
     - resourceSpecification
    """
    pass

  def getPopularBuddyLists(self, language, country):
    """
    Parameters:
     - language
     - country
    """
    pass

  def getPromotedBuddyContacts(self, language, country):
    """
    Parameters:
     - language
     - country
    """
    pass

  def activeBuddySubscriberCount(self):
    pass

  def addOperationForChannel(self, opType, param1, param2, param3):
    """
    Parameters:
     - opType
     - param1
     - param2
     - param3
    """
    pass

  def displayBuddySubscriberCount(self):
    pass

  def findContactByUseridWithoutAbuseBlockForChannel(self, userid):
    """
    Parameters:
     - userid
    """
    pass

  def getAllContactIdsForChannel(self):
    pass

  def getCompactContacts(self, lastModifiedTimestamp):
    """
    Parameters:
     - lastModifiedTimestamp
    """
    pass

  def getContactsForChannel(self, ids):
    """
    Parameters:
     - ids
    """
    pass

  def getDisplayName(self, mid):
    """
    Parameters:
     - mid
    """
    pass

  def getFavoriteMidsForChannel(self):
    pass

  def getFriendMids(self):
    pass

  def getGroupMemberMids(self, groupId):
    """
    Parameters:
     - groupId
    """
    pass

  def getGroupsForChannel(self, groupIds):
    """
    Parameters:
     - groupIds
    """
    pass

  def getIdentityCredential(self):
    pass

  def getJoinedGroupIdsForChannel(self):
    pass

  def getMetaProfile(self):
    pass

  def getMid(self):
    pass

  def getPrimaryClientForChannel(self):
    pass

  def getProfileForChannel(self):
    pass

  def getSimpleChannelContacts(self, ids):
    """
    Parameters:
     - ids
    """
    pass

  def getUserCountryForBilling(self, country, remoteIp):
    """
    Parameters:
     - country
     - remoteIp
    """
    pass

  def getUserCreateTime(self):
    pass

  def getUserIdentities(self):
    pass

  def getUserLanguage(self):
    pass

  def getUserMidsWhoAddedMe(self):
    pass

  def isGroupMember(self, groupId):
    """
    Parameters:
     - groupId
    """
    pass

  def isInContact(self, mid):
    """
    Parameters:
     - mid
